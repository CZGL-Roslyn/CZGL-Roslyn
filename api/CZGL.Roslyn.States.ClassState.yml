### YamlMime:ManagedReference
items:
- uid: CZGL.Roslyn.States.ClassState
  commentId: T:CZGL.Roslyn.States.ClassState
  id: ClassState
  parent: CZGL.Roslyn.States
  children:
  - CZGL.Roslyn.States.ClassState.BaseClass
  - CZGL.Roslyn.States.ClassState.Ctors
  - CZGL.Roslyn.States.ClassState.Delegates
  - CZGL.Roslyn.States.ClassState.Events
  - CZGL.Roslyn.States.ClassState.Fields
  - CZGL.Roslyn.States.ClassState.Interfaces
  - CZGL.Roslyn.States.ClassState.Keyword
  - CZGL.Roslyn.States.ClassState.Methods
  - CZGL.Roslyn.States.ClassState.Others
  - CZGL.Roslyn.States.ClassState.Propertys
  langs:
  - csharp
  - vb
  name: ClassState
  nameWithType: ClassState
  fullName: CZGL.Roslyn.States.ClassState
  type: Class
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: ClassState
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 6
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  syntax:
    content: public class ClassState
    content.vb: Public Class ClassState
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CZGL.Roslyn.States.ClassState.Keyword
  commentId: P:CZGL.Roslyn.States.ClassState.Keyword
  id: Keyword
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Keyword
  nameWithType: ClassState.Keyword
  fullName: CZGL.Roslyn.States.ClassState.Keyword
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Keyword
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 11
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n关键字\n"
  example: []
  syntax:
    content: public string Keyword { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Keyword As String
  overload: CZGL.Roslyn.States.ClassState.Keyword*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.States.ClassState.BaseClass
  commentId: P:CZGL.Roslyn.States.ClassState.BaseClass
  id: BaseClass
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: BaseClass
  nameWithType: ClassState.BaseClass
  fullName: CZGL.Roslyn.States.ClassState.BaseClass
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: BaseClass
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 16
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n继承基类\n"
  example: []
  syntax:
    content: public string BaseClass { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property BaseClass As String
  overload: CZGL.Roslyn.States.ClassState.BaseClass*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.States.ClassState.Interfaces
  commentId: P:CZGL.Roslyn.States.ClassState.Interfaces
  id: Interfaces
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Interfaces
  nameWithType: ClassState.Interfaces
  fullName: CZGL.Roslyn.States.ClassState.Interfaces
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Interfaces
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 21
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n接口列表\n"
  example: []
  syntax:
    content: public HashSet<string> Interfaces { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public ReadOnly Property Interfaces As HashSet(Of String)
  overload: CZGL.Roslyn.States.ClassState.Interfaces*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Ctors
  commentId: P:CZGL.Roslyn.States.ClassState.Ctors
  id: Ctors
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Ctors
  nameWithType: ClassState.Ctors
  fullName: CZGL.Roslyn.States.ClassState.Ctors
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Ctors
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 26
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n构造函数\n"
  example: []
  syntax:
    content: public HashSet<CtorBuilder> Ctors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{CZGL.Roslyn.CtorBuilder}
    content.vb: Public ReadOnly Property Ctors As HashSet(Of CtorBuilder)
  overload: CZGL.Roslyn.States.ClassState.Ctors*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Fields
  commentId: P:CZGL.Roslyn.States.ClassState.Fields
  id: Fields
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: ClassState.Fields
  fullName: CZGL.Roslyn.States.ClassState.Fields
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Fields
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 31
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n字段\n"
  example: []
  syntax:
    content: public HashSet<FieldBuilder> Fields { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{CZGL.Roslyn.FieldBuilder}
    content.vb: Public ReadOnly Property Fields As HashSet(Of FieldBuilder)
  overload: CZGL.Roslyn.States.ClassState.Fields*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Propertys
  commentId: P:CZGL.Roslyn.States.ClassState.Propertys
  id: Propertys
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Propertys
  nameWithType: ClassState.Propertys
  fullName: CZGL.Roslyn.States.ClassState.Propertys
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Propertys
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 36
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n属性\n"
  example: []
  syntax:
    content: public HashSet<PropertyBuilder> Propertys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{CZGL.Roslyn.PropertyBuilder}
    content.vb: Public ReadOnly Property Propertys As HashSet(Of PropertyBuilder)
  overload: CZGL.Roslyn.States.ClassState.Propertys*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Methods
  commentId: P:CZGL.Roslyn.States.ClassState.Methods
  id: Methods
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Methods
  nameWithType: ClassState.Methods
  fullName: CZGL.Roslyn.States.ClassState.Methods
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Methods
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 41
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n方法\n"
  example: []
  syntax:
    content: public HashSet<MethodBuilder> Methods { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{CZGL.Roslyn.MethodBuilder}
    content.vb: Public ReadOnly Property Methods As HashSet(Of MethodBuilder)
  overload: CZGL.Roslyn.States.ClassState.Methods*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Delegates
  commentId: P:CZGL.Roslyn.States.ClassState.Delegates
  id: Delegates
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Delegates
  nameWithType: ClassState.Delegates
  fullName: CZGL.Roslyn.States.ClassState.Delegates
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Delegates
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 46
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n委托\n"
  example: []
  syntax:
    content: public HashSet<DelegateBuilder> Delegates { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{CZGL.Roslyn.DelegateBuilder}
    content.vb: Public ReadOnly Property Delegates As HashSet(Of DelegateBuilder)
  overload: CZGL.Roslyn.States.ClassState.Delegates*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Events
  commentId: P:CZGL.Roslyn.States.ClassState.Events
  id: Events
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: ClassState.Events
  fullName: CZGL.Roslyn.States.ClassState.Events
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Events
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 51
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n事件\n"
  example: []
  syntax:
    content: public HashSet<EventBuilder> Events { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{CZGL.Roslyn.EventBuilder}
    content.vb: Public ReadOnly Property Events As HashSet(Of EventBuilder)
  overload: CZGL.Roslyn.States.ClassState.Events*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CZGL.Roslyn.States.ClassState.Others
  commentId: P:CZGL.Roslyn.States.ClassState.Others
  id: Others
  parent: CZGL.Roslyn.States.ClassState
  langs:
  - csharp
  - vb
  name: Others
  nameWithType: ClassState.Others
  fullName: CZGL.Roslyn.States.ClassState.Others
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/ClassState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Others
    path: src/Src/CZGL.Roslyn/States/ClassState.cs
    startLine: 56
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n嵌套类、嵌套接口等\n"
  example: []
  syntax:
    content: public HashSet<object> Others { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{System.Object}
    content.vb: Public ReadOnly Property Others As HashSet(Of Object)
  overload: CZGL.Roslyn.States.ClassState.Others*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CZGL.Roslyn.States
  commentId: N:CZGL.Roslyn.States
  name: CZGL.Roslyn.States
  nameWithType: CZGL.Roslyn.States
  fullName: CZGL.Roslyn.States
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CZGL.Roslyn.States.ClassState.Keyword*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Keyword
  name: Keyword
  nameWithType: ClassState.Keyword
  fullName: CZGL.Roslyn.States.ClassState.Keyword
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CZGL.Roslyn.States.ClassState.BaseClass*
  commentId: Overload:CZGL.Roslyn.States.ClassState.BaseClass
  name: BaseClass
  nameWithType: ClassState.BaseClass
  fullName: CZGL.Roslyn.States.ClassState.BaseClass
- uid: CZGL.Roslyn.States.ClassState.Interfaces*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Interfaces
  name: Interfaces
  nameWithType: ClassState.Interfaces
  fullName: CZGL.Roslyn.States.ClassState.Interfaces
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: T:System.Collections.Generic.HashSet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: System.Collections.Generic.HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CZGL.Roslyn.States.ClassState.Ctors*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Ctors
  name: Ctors
  nameWithType: ClassState.Ctors
  fullName: CZGL.Roslyn.States.ClassState.Ctors
- uid: System.Collections.Generic.HashSet{CZGL.Roslyn.CtorBuilder}
  commentId: T:System.Collections.Generic.HashSet{CZGL.Roslyn.CtorBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<CtorBuilder>
  nameWithType: HashSet<CtorBuilder>
  fullName: System.Collections.Generic.HashSet<CZGL.Roslyn.CtorBuilder>
  nameWithType.vb: HashSet(Of CtorBuilder)
  fullName.vb: System.Collections.Generic.HashSet(Of CZGL.Roslyn.CtorBuilder)
  name.vb: HashSet(Of CtorBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.CtorBuilder
    name: CtorBuilder
    nameWithType: CtorBuilder
    fullName: CZGL.Roslyn.CtorBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.CtorBuilder
    name: CtorBuilder
    nameWithType: CtorBuilder
    fullName: CZGL.Roslyn.CtorBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.States.ClassState.Fields*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Fields
  name: Fields
  nameWithType: ClassState.Fields
  fullName: CZGL.Roslyn.States.ClassState.Fields
- uid: System.Collections.Generic.HashSet{CZGL.Roslyn.FieldBuilder}
  commentId: T:System.Collections.Generic.HashSet{CZGL.Roslyn.FieldBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<FieldBuilder>
  nameWithType: HashSet<FieldBuilder>
  fullName: System.Collections.Generic.HashSet<CZGL.Roslyn.FieldBuilder>
  nameWithType.vb: HashSet(Of FieldBuilder)
  fullName.vb: System.Collections.Generic.HashSet(Of CZGL.Roslyn.FieldBuilder)
  name.vb: HashSet(Of FieldBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.FieldBuilder
    name: FieldBuilder
    nameWithType: FieldBuilder
    fullName: CZGL.Roslyn.FieldBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.FieldBuilder
    name: FieldBuilder
    nameWithType: FieldBuilder
    fullName: CZGL.Roslyn.FieldBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.States.ClassState.Propertys*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Propertys
  name: Propertys
  nameWithType: ClassState.Propertys
  fullName: CZGL.Roslyn.States.ClassState.Propertys
- uid: System.Collections.Generic.HashSet{CZGL.Roslyn.PropertyBuilder}
  commentId: T:System.Collections.Generic.HashSet{CZGL.Roslyn.PropertyBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<PropertyBuilder>
  nameWithType: HashSet<PropertyBuilder>
  fullName: System.Collections.Generic.HashSet<CZGL.Roslyn.PropertyBuilder>
  nameWithType.vb: HashSet(Of PropertyBuilder)
  fullName.vb: System.Collections.Generic.HashSet(Of CZGL.Roslyn.PropertyBuilder)
  name.vb: HashSet(Of PropertyBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.PropertyBuilder
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: CZGL.Roslyn.PropertyBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.PropertyBuilder
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: CZGL.Roslyn.PropertyBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.States.ClassState.Methods*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Methods
  name: Methods
  nameWithType: ClassState.Methods
  fullName: CZGL.Roslyn.States.ClassState.Methods
- uid: System.Collections.Generic.HashSet{CZGL.Roslyn.MethodBuilder}
  commentId: T:System.Collections.Generic.HashSet{CZGL.Roslyn.MethodBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<MethodBuilder>
  nameWithType: HashSet<MethodBuilder>
  fullName: System.Collections.Generic.HashSet<CZGL.Roslyn.MethodBuilder>
  nameWithType.vb: HashSet(Of MethodBuilder)
  fullName.vb: System.Collections.Generic.HashSet(Of CZGL.Roslyn.MethodBuilder)
  name.vb: HashSet(Of MethodBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.MethodBuilder
    name: MethodBuilder
    nameWithType: MethodBuilder
    fullName: CZGL.Roslyn.MethodBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.MethodBuilder
    name: MethodBuilder
    nameWithType: MethodBuilder
    fullName: CZGL.Roslyn.MethodBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.States.ClassState.Delegates*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Delegates
  name: Delegates
  nameWithType: ClassState.Delegates
  fullName: CZGL.Roslyn.States.ClassState.Delegates
- uid: System.Collections.Generic.HashSet{CZGL.Roslyn.DelegateBuilder}
  commentId: T:System.Collections.Generic.HashSet{CZGL.Roslyn.DelegateBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<DelegateBuilder>
  nameWithType: HashSet<DelegateBuilder>
  fullName: System.Collections.Generic.HashSet<CZGL.Roslyn.DelegateBuilder>
  nameWithType.vb: HashSet(Of DelegateBuilder)
  fullName.vb: System.Collections.Generic.HashSet(Of CZGL.Roslyn.DelegateBuilder)
  name.vb: HashSet(Of DelegateBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.DelegateBuilder
    name: DelegateBuilder
    nameWithType: DelegateBuilder
    fullName: CZGL.Roslyn.DelegateBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.DelegateBuilder
    name: DelegateBuilder
    nameWithType: DelegateBuilder
    fullName: CZGL.Roslyn.DelegateBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.States.ClassState.Events*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Events
  name: Events
  nameWithType: ClassState.Events
  fullName: CZGL.Roslyn.States.ClassState.Events
- uid: System.Collections.Generic.HashSet{CZGL.Roslyn.EventBuilder}
  commentId: T:System.Collections.Generic.HashSet{CZGL.Roslyn.EventBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<EventBuilder>
  nameWithType: HashSet<EventBuilder>
  fullName: System.Collections.Generic.HashSet<CZGL.Roslyn.EventBuilder>
  nameWithType.vb: HashSet(Of EventBuilder)
  fullName.vb: System.Collections.Generic.HashSet(Of CZGL.Roslyn.EventBuilder)
  name.vb: HashSet(Of EventBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.EventBuilder
    name: EventBuilder
    nameWithType: EventBuilder
    fullName: CZGL.Roslyn.EventBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.EventBuilder
    name: EventBuilder
    nameWithType: EventBuilder
    fullName: CZGL.Roslyn.EventBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.States.ClassState.Others*
  commentId: Overload:CZGL.Roslyn.States.ClassState.Others
  name: Others
  nameWithType: ClassState.Others
  fullName: CZGL.Roslyn.States.ClassState.Others
- uid: System.Collections.Generic.HashSet{System.Object}
  commentId: T:System.Collections.Generic.HashSet{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Object>
  nameWithType: HashSet<Object>
  fullName: System.Collections.Generic.HashSet<System.Object>
  nameWithType.vb: HashSet(Of Object)
  fullName.vb: System.Collections.Generic.HashSet(Of System.Object)
  name.vb: HashSet(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
