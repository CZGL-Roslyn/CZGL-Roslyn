### YamlMime:ManagedReference
items:
- uid: CZGL.Roslyn.States.FuncState
  commentId: T:CZGL.Roslyn.States.FuncState
  id: FuncState
  parent: CZGL.Roslyn.States
  children:
  - CZGL.Roslyn.States.FuncState.Code
  - CZGL.Roslyn.States.FuncState.Params
  - CZGL.Roslyn.States.FuncState.ReturnType
  - CZGL.Roslyn.States.FuncState.UseCode
  langs:
  - csharp
  - vb
  name: FuncState
  nameWithType: FuncState
  fullName: CZGL.Roslyn.States.FuncState
  type: Class
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/FuncState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: FuncState
    path: src/Src/CZGL.Roslyn/States/FuncState.cs
    startLine: 7
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  syntax:
    content: public class FuncState
    content.vb: Public Class FuncState
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CZGL.Roslyn.States.FuncState.ReturnType
  commentId: P:CZGL.Roslyn.States.FuncState.ReturnType
  id: ReturnType
  parent: CZGL.Roslyn.States.FuncState
  langs:
  - csharp
  - vb
  name: ReturnType
  nameWithType: FuncState.ReturnType
  fullName: CZGL.Roslyn.States.FuncState.ReturnType
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/FuncState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: ReturnType
    path: src/Src/CZGL.Roslyn/States/FuncState.cs
    startLine: 12
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n返回值\n"
  example: []
  syntax:
    content: public string ReturnType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ReturnType As String
  overload: CZGL.Roslyn.States.FuncState.ReturnType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.States.FuncState.Params
  commentId: P:CZGL.Roslyn.States.FuncState.Params
  id: Params
  parent: CZGL.Roslyn.States.FuncState
  langs:
  - csharp
  - vb
  name: Params
  nameWithType: FuncState.Params
  fullName: CZGL.Roslyn.States.FuncState.Params
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/FuncState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Params
    path: src/Src/CZGL.Roslyn/States/FuncState.cs
    startLine: 17
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n参数列表\n"
  example: []
  syntax:
    content: public HashSet<string> Params { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Property Params As HashSet(Of String)
  overload: CZGL.Roslyn.States.FuncState.Params*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.States.FuncState.UseCode
  commentId: P:CZGL.Roslyn.States.FuncState.UseCode
  id: UseCode
  parent: CZGL.Roslyn.States.FuncState
  langs:
  - csharp
  - vb
  name: UseCode
  nameWithType: FuncState.UseCode
  fullName: CZGL.Roslyn.States.FuncState.UseCode
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/FuncState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: UseCode
    path: src/Src/CZGL.Roslyn/States/FuncState.cs
    startLine: 23
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n使用代码直接生成\n"
  example: []
  syntax:
    content: public bool UseCode { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property UseCode As Boolean
  overload: CZGL.Roslyn.States.FuncState.UseCode*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.States.FuncState.Code
  commentId: P:CZGL.Roslyn.States.FuncState.Code
  id: Code
  parent: CZGL.Roslyn.States.FuncState
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: FuncState.Code
  fullName: CZGL.Roslyn.States.FuncState.Code
  type: Property
  source:
    remote:
      path: src/Src/CZGL.Roslyn/States/FuncState.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: Code
    path: src/Src/CZGL.Roslyn/States/FuncState.cs
    startLine: 28
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn.States
  summary: "\n使用代码\n"
  example: []
  syntax:
    content: public string Code { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Code As String
  overload: CZGL.Roslyn.States.FuncState.Code*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: CZGL.Roslyn.States
  commentId: N:CZGL.Roslyn.States
  name: CZGL.Roslyn.States
  nameWithType: CZGL.Roslyn.States
  fullName: CZGL.Roslyn.States
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CZGL.Roslyn.States.FuncState.ReturnType*
  commentId: Overload:CZGL.Roslyn.States.FuncState.ReturnType
  name: ReturnType
  nameWithType: FuncState.ReturnType
  fullName: CZGL.Roslyn.States.FuncState.ReturnType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CZGL.Roslyn.States.FuncState.Params*
  commentId: Overload:CZGL.Roslyn.States.FuncState.Params
  name: Params
  nameWithType: FuncState.Params
  fullName: CZGL.Roslyn.States.FuncState.Params
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: T:System.Collections.Generic.HashSet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: System.Collections.Generic.HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CZGL.Roslyn.States.FuncState.UseCode*
  commentId: Overload:CZGL.Roslyn.States.FuncState.UseCode
  name: UseCode
  nameWithType: FuncState.UseCode
  fullName: CZGL.Roslyn.States.FuncState.UseCode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CZGL.Roslyn.States.FuncState.Code*
  commentId: Overload:CZGL.Roslyn.States.FuncState.Code
  name: Code
  nameWithType: FuncState.Code
  fullName: CZGL.Roslyn.States.FuncState.Code
