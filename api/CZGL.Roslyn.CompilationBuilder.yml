### YamlMime:ManagedReference
items:
- uid: CZGL.Roslyn.CompilationBuilder
  commentId: T:CZGL.Roslyn.CompilationBuilder
  id: CompilationBuilder
  parent: CZGL.Roslyn
  children:
  - CZGL.Roslyn.CompilationBuilder.CreateDomain(CZGL.Roslyn.ClassBuilder,System.String,System.String,CZGL.Roslyn.DomainOptionBuilder,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  - CZGL.Roslyn.CompilationBuilder.CreateDomain(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  - CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Reflection.Assembly)
  - CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Type)
  - CZGL.Roslyn.CompilationBuilder.WithAutoAssembly
  - CZGL.Roslyn.CompilationBuilder.WithNamespace(CZGL.Roslyn.NamespaceBuilder)
  - CZGL.Roslyn.CompilationBuilder.WithNamespace(System.String,System.Action{CZGL.Roslyn.NamespaceBuilder})
  - CZGL.Roslyn.CompilationBuilder.WithOption(CZGL.Roslyn.DomainOptionBuilder)
  - CZGL.Roslyn.CompilationBuilder.WithOption(System.Action{CZGL.Roslyn.DomainOptionBuilder})
  - CZGL.Roslyn.CompilationBuilder.WithPath(System.String)
  langs:
  - csharp
  - vb
  name: CompilationBuilder
  nameWithType: CompilationBuilder
  fullName: CZGL.Roslyn.CompilationBuilder
  type: Class
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: CompilationBuilder
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 20
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n程序集编译构建器\n"
  example: []
  syntax:
    content: public class CompilationBuilder
    content.vb: Public Class CompilationBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CZGL.Roslyn.CompilationBuilder.WithOption(CZGL.Roslyn.DomainOptionBuilder)
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithOption(CZGL.Roslyn.DomainOptionBuilder)
  id: WithOption(CZGL.Roslyn.DomainOptionBuilder)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithOption(DomainOptionBuilder)
  nameWithType: CompilationBuilder.WithOption(DomainOptionBuilder)
  fullName: CZGL.Roslyn.CompilationBuilder.WithOption(CZGL.Roslyn.DomainOptionBuilder)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithOption
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 30
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n\n"
  example: []
  syntax:
    content: public CompilationBuilder WithOption(DomainOptionBuilder option)
    parameters:
    - id: option
      type: CZGL.Roslyn.DomainOptionBuilder
      description: 编译配置
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithOption(option As DomainOptionBuilder) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithOption*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.CompilationBuilder.WithOption(System.Action{CZGL.Roslyn.DomainOptionBuilder})
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithOption(System.Action{CZGL.Roslyn.DomainOptionBuilder})
  id: WithOption(System.Action{CZGL.Roslyn.DomainOptionBuilder})
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithOption(Action<DomainOptionBuilder>)
  nameWithType: CompilationBuilder.WithOption(Action<DomainOptionBuilder>)
  fullName: CZGL.Roslyn.CompilationBuilder.WithOption(System.Action<CZGL.Roslyn.DomainOptionBuilder>)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithOption
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 41
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n\n"
  example: []
  syntax:
    content: public CompilationBuilder WithOption(Action<DomainOptionBuilder> builder)
    parameters:
    - id: builder
      type: System.Action{CZGL.Roslyn.DomainOptionBuilder}
      description: 编译配置器
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithOption(builder As Action(Of DomainOptionBuilder)) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithOption*
  nameWithType.vb: CompilationBuilder.WithOption(Action(Of DomainOptionBuilder))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CZGL.Roslyn.CompilationBuilder.WithOption(System.Action(Of CZGL.Roslyn.DomainOptionBuilder))
  name.vb: WithOption(Action(Of DomainOptionBuilder))
- uid: CZGL.Roslyn.CompilationBuilder.WithPath(System.String)
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithPath(System.String)
  id: WithPath(System.String)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithPath(String)
  nameWithType: CompilationBuilder.WithPath(String)
  fullName: CZGL.Roslyn.CompilationBuilder.WithPath(System.String)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithPath
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 75
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n程序集生成路径\n"
  example: []
  syntax:
    content: public CompilationBuilder WithPath(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithPath(path As String) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithPath*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.CompilationBuilder.WithNamespace(CZGL.Roslyn.NamespaceBuilder)
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithNamespace(CZGL.Roslyn.NamespaceBuilder)
  id: WithNamespace(CZGL.Roslyn.NamespaceBuilder)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithNamespace(NamespaceBuilder)
  nameWithType: CompilationBuilder.WithNamespace(NamespaceBuilder)
  fullName: CZGL.Roslyn.CompilationBuilder.WithNamespace(CZGL.Roslyn.NamespaceBuilder)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithNamespace
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 86
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n添加要编译的命名空间\n"
  example: []
  syntax:
    content: public CompilationBuilder WithNamespace(NamespaceBuilder builder)
    parameters:
    - id: builder
      type: CZGL.Roslyn.NamespaceBuilder
      description: ''
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithNamespace(builder As NamespaceBuilder) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithNamespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.CompilationBuilder.WithNamespace(System.String,System.Action{CZGL.Roslyn.NamespaceBuilder})
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithNamespace(System.String,System.Action{CZGL.Roslyn.NamespaceBuilder})
  id: WithNamespace(System.String,System.Action{CZGL.Roslyn.NamespaceBuilder})
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithNamespace(String, Action<NamespaceBuilder>)
  nameWithType: CompilationBuilder.WithNamespace(String, Action<NamespaceBuilder>)
  fullName: CZGL.Roslyn.CompilationBuilder.WithNamespace(System.String, System.Action<CZGL.Roslyn.NamespaceBuilder>)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithNamespace
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 98
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n添加要编译的命名空间\n"
  example: []
  syntax:
    content: public CompilationBuilder WithNamespace(string namespaceName, Action<NamespaceBuilder> builder)
    parameters:
    - id: namespaceName
      type: System.String
      description: ''
    - id: builder
      type: System.Action{CZGL.Roslyn.NamespaceBuilder}
      description: ''
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithNamespace(namespaceName As String, builder As Action(Of NamespaceBuilder)) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithNamespace*
  nameWithType.vb: CompilationBuilder.WithNamespace(String, Action(Of NamespaceBuilder))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CZGL.Roslyn.CompilationBuilder.WithNamespace(System.String, System.Action(Of CZGL.Roslyn.NamespaceBuilder))
  name.vb: WithNamespace(String, Action(Of NamespaceBuilder))
- uid: CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Reflection.Assembly)
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Reflection.Assembly)
  id: WithAssembly(System.Reflection.Assembly)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithAssembly(Assembly)
  nameWithType: CompilationBuilder.WithAssembly(Assembly)
  fullName: CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithAssembly
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 114
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n添加程序集引用\n"
  example: []
  syntax:
    content: public CompilationBuilder WithAssembly(Assembly assembly)
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: ''
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithAssembly(assembly As Assembly) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithAssembly*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Type)
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Type)
  id: WithAssembly(System.Type)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithAssembly(Type)
  nameWithType: CompilationBuilder.WithAssembly(Type)
  fullName: CZGL.Roslyn.CompilationBuilder.WithAssembly(System.Type)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithAssembly
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 125
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n自动识别此类型所在程序集所依赖的所有程序集并引用\n"
  example: []
  syntax:
    content: public CompilationBuilder WithAssembly(Type type)
    parameters:
    - id: type
      type: System.Type
      description: ''
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithAssembly(type As Type) As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithAssembly*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.CompilationBuilder.WithAutoAssembly
  commentId: M:CZGL.Roslyn.CompilationBuilder.WithAutoAssembly
  id: WithAutoAssembly
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: WithAutoAssembly()
  nameWithType: CompilationBuilder.WithAutoAssembly()
  fullName: CZGL.Roslyn.CompilationBuilder.WithAutoAssembly()
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: WithAutoAssembly
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 138
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n自动添加程序集引用\n"
  example: []
  syntax:
    content: public CompilationBuilder WithAutoAssembly()
    return:
      type: CZGL.Roslyn.CompilationBuilder
      description: ''
    content.vb: Public Function WithAutoAssembly As CompilationBuilder
  overload: CZGL.Roslyn.CompilationBuilder.WithAutoAssembly*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CZGL.Roslyn.CompilationBuilder.CreateDomain(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  commentId: M:CZGL.Roslyn.CompilationBuilder.CreateDomain(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  id: CreateDomain(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: CreateDomain(out ImmutableArray<Diagnostic>)
  nameWithType: CompilationBuilder.CreateDomain(out ImmutableArray<Diagnostic>)
  fullName: CZGL.Roslyn.CompilationBuilder.CreateDomain(out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: CreateDomain
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 149
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  syntax:
    content: public bool CreateDomain(out ImmutableArray<Diagnostic> messages)
    parameters:
    - id: messages
      type: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}
    return:
      type: System.Boolean
    content.vb: Public Function CreateDomain(ByRef messages As ImmutableArray(Of Diagnostic)) As Boolean
  overload: CZGL.Roslyn.CompilationBuilder.CreateDomain*
  nameWithType.vb: CompilationBuilder.CreateDomain(ByRef ImmutableArray(Of Diagnostic))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CZGL.Roslyn.CompilationBuilder.CreateDomain(ByRef System.Collections.Immutable.ImmutableArray(Of Microsoft.CodeAnalysis.Diagnostic))
  name.vb: CreateDomain(ByRef ImmutableArray(Of Diagnostic))
- uid: CZGL.Roslyn.CompilationBuilder.CreateDomain(CZGL.Roslyn.ClassBuilder,System.String,System.String,CZGL.Roslyn.DomainOptionBuilder,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  commentId: M:CZGL.Roslyn.CompilationBuilder.CreateDomain(CZGL.Roslyn.ClassBuilder,System.String,System.String,CZGL.Roslyn.DomainOptionBuilder,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  id: CreateDomain(CZGL.Roslyn.ClassBuilder,System.String,System.String,CZGL.Roslyn.DomainOptionBuilder,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)
  parent: CZGL.Roslyn.CompilationBuilder
  langs:
  - csharp
  - vb
  name: CreateDomain(ClassBuilder, String, String, DomainOptionBuilder, out ImmutableArray<Diagnostic>)
  nameWithType: CompilationBuilder.CreateDomain(ClassBuilder, String, String, DomainOptionBuilder, out ImmutableArray<Diagnostic>)
  fullName: CZGL.Roslyn.CompilationBuilder.CreateDomain(CZGL.Roslyn.ClassBuilder, System.String, System.String, CZGL.Roslyn.DomainOptionBuilder, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>)
  type: Method
  source:
    remote:
      path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
      branch: master
      repo: https://github.com/CZGL-Roslyn/CZGL-Roslyn.git
    id: CreateDomain
    path: src/Src/CZGL.Roslyn/CompilationBuilder.cs
    startLine: 192
  assemblies:
  - CZGL.Roslyn
  namespace: CZGL.Roslyn
  summary: "\n通过类构建器直接生成程序集\n"
  example: []
  syntax:
    content: public static bool CreateDomain(ClassBuilder builder, string assemblyPath, string assemblyName, DomainOptionBuilder option, out ImmutableArray<Diagnostic> message)
    parameters:
    - id: builder
      type: CZGL.Roslyn.ClassBuilder
      description: 类构建器
    - id: assemblyPath
      type: System.String
      description: 程序集路径
    - id: assemblyName
      type: System.String
      description: 程序集名称
    - id: option
      type: CZGL.Roslyn.DomainOptionBuilder
      description: 程序集配置
    - id: message
      type: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function CreateDomain(builder As ClassBuilder, assemblyPath As String, assemblyName As String, option As DomainOptionBuilder, ByRef message As ImmutableArray(Of Diagnostic)) As Boolean
  overload: CZGL.Roslyn.CompilationBuilder.CreateDomain*
  nameWithType.vb: CompilationBuilder.CreateDomain(ClassBuilder, String, String, DomainOptionBuilder, ByRef ImmutableArray(Of Diagnostic))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CZGL.Roslyn.CompilationBuilder.CreateDomain(CZGL.Roslyn.ClassBuilder, System.String, System.String, CZGL.Roslyn.DomainOptionBuilder, ByRef System.Collections.Immutable.ImmutableArray(Of Microsoft.CodeAnalysis.Diagnostic))
  name.vb: CreateDomain(ClassBuilder, String, String, DomainOptionBuilder, ByRef ImmutableArray(Of Diagnostic))
references:
- uid: CZGL.Roslyn
  commentId: N:CZGL.Roslyn
  name: CZGL.Roslyn
  nameWithType: CZGL.Roslyn
  fullName: CZGL.Roslyn
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CZGL.Roslyn.CompilationBuilder.WithOption*
  commentId: Overload:CZGL.Roslyn.CompilationBuilder.WithOption
  name: WithOption
  nameWithType: CompilationBuilder.WithOption
  fullName: CZGL.Roslyn.CompilationBuilder.WithOption
- uid: CZGL.Roslyn.DomainOptionBuilder
  commentId: T:CZGL.Roslyn.DomainOptionBuilder
  parent: CZGL.Roslyn
  name: DomainOptionBuilder
  nameWithType: DomainOptionBuilder
  fullName: CZGL.Roslyn.DomainOptionBuilder
- uid: CZGL.Roslyn.CompilationBuilder
  commentId: T:CZGL.Roslyn.CompilationBuilder
  parent: CZGL.Roslyn
  name: CompilationBuilder
  nameWithType: CompilationBuilder
  fullName: CZGL.Roslyn.CompilationBuilder
- uid: System.Action{CZGL.Roslyn.DomainOptionBuilder}
  commentId: T:System.Action{CZGL.Roslyn.DomainOptionBuilder}
  parent: System
  definition: System.Action`1
  name: Action<DomainOptionBuilder>
  nameWithType: Action<DomainOptionBuilder>
  fullName: System.Action<CZGL.Roslyn.DomainOptionBuilder>
  nameWithType.vb: Action(Of DomainOptionBuilder)
  fullName.vb: System.Action(Of CZGL.Roslyn.DomainOptionBuilder)
  name.vb: Action(Of DomainOptionBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.DomainOptionBuilder
    name: DomainOptionBuilder
    nameWithType: DomainOptionBuilder
    fullName: CZGL.Roslyn.DomainOptionBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.DomainOptionBuilder
    name: DomainOptionBuilder
    nameWithType: DomainOptionBuilder
    fullName: CZGL.Roslyn.DomainOptionBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.CompilationBuilder.WithPath*
  commentId: Overload:CZGL.Roslyn.CompilationBuilder.WithPath
  name: WithPath
  nameWithType: CompilationBuilder.WithPath
  fullName: CZGL.Roslyn.CompilationBuilder.WithPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CZGL.Roslyn.CompilationBuilder.WithNamespace*
  commentId: Overload:CZGL.Roslyn.CompilationBuilder.WithNamespace
  name: WithNamespace
  nameWithType: CompilationBuilder.WithNamespace
  fullName: CZGL.Roslyn.CompilationBuilder.WithNamespace
- uid: CZGL.Roslyn.NamespaceBuilder
  commentId: T:CZGL.Roslyn.NamespaceBuilder
  parent: CZGL.Roslyn
  name: NamespaceBuilder
  nameWithType: NamespaceBuilder
  fullName: CZGL.Roslyn.NamespaceBuilder
- uid: System.Action{CZGL.Roslyn.NamespaceBuilder}
  commentId: T:System.Action{CZGL.Roslyn.NamespaceBuilder}
  parent: System
  definition: System.Action`1
  name: Action<NamespaceBuilder>
  nameWithType: Action<NamespaceBuilder>
  fullName: System.Action<CZGL.Roslyn.NamespaceBuilder>
  nameWithType.vb: Action(Of NamespaceBuilder)
  fullName.vb: System.Action(Of CZGL.Roslyn.NamespaceBuilder)
  name.vb: Action(Of NamespaceBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CZGL.Roslyn.NamespaceBuilder
    name: NamespaceBuilder
    nameWithType: NamespaceBuilder
    fullName: CZGL.Roslyn.NamespaceBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CZGL.Roslyn.NamespaceBuilder
    name: NamespaceBuilder
    nameWithType: NamespaceBuilder
    fullName: CZGL.Roslyn.NamespaceBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: CZGL.Roslyn.CompilationBuilder.WithAssembly*
  commentId: Overload:CZGL.Roslyn.CompilationBuilder.WithAssembly
  name: WithAssembly
  nameWithType: CompilationBuilder.WithAssembly
  fullName: CZGL.Roslyn.CompilationBuilder.WithAssembly
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CZGL.Roslyn.CompilationBuilder.WithAutoAssembly*
  commentId: Overload:CZGL.Roslyn.CompilationBuilder.WithAutoAssembly
  name: WithAutoAssembly
  nameWithType: CompilationBuilder.WithAutoAssembly
  fullName: CZGL.Roslyn.CompilationBuilder.WithAutoAssembly
- uid: CZGL.Roslyn.CompilationBuilder.CreateDomain*
  commentId: Overload:CZGL.Roslyn.CompilationBuilder.CreateDomain
  name: CreateDomain
  nameWithType: CompilationBuilder.CreateDomain
  fullName: CZGL.Roslyn.CompilationBuilder.CreateDomain
- uid: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}
  commentId: T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableArray`1
  name: ImmutableArray<Diagnostic>
  nameWithType: ImmutableArray<Diagnostic>
  fullName: System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
  nameWithType.vb: ImmutableArray(Of Diagnostic)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of Microsoft.CodeAnalysis.Diagnostic)
  name.vb: ImmutableArray(Of Diagnostic)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.CodeAnalysis.Diagnostic
    name: Diagnostic
    nameWithType: Diagnostic
    fullName: Microsoft.CodeAnalysis.Diagnostic
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.CodeAnalysis.Diagnostic
    name: Diagnostic
    nameWithType: Diagnostic
    fullName: Microsoft.CodeAnalysis.Diagnostic
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  isExternal: true
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  nameWithType.vb: ImmutableArray(Of T)
  fullName.vb: System.Collections.Immutable.ImmutableArray(Of T)
  name.vb: ImmutableArray(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
- uid: CZGL.Roslyn.ClassBuilder
  commentId: T:CZGL.Roslyn.ClassBuilder
  parent: CZGL.Roslyn
  name: ClassBuilder
  nameWithType: ClassBuilder
  fullName: CZGL.Roslyn.ClassBuilder
